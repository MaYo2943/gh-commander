{"name":"GitHub Commander","tagline":"Simplify your life and manage your GitHub project with ease.","body":"![logo](https://raw.githubusercontent.com/jhermann/gh-commander/master/docs/_static/logo-64.png) | *GitHub Commander* is a tool to access the [GitHub API v3](https://developer.github.com/v3/) from the CLI and automate otherwise tedious tasks.\r\n:----: | :----\r\n**Project** | [![Groups](https://img.shields.io/badge/Google_groups-gh--commander-orange.svg)](https://groups.google.com/forum/#!forum/gh-commander) [![License](https://img.shields.io/pypi/l/gh-commander.svg)](https://github.com/jhermann/gh-commander/blob/master/LICENSE) [![Development Status](https://pypip.in/status/gh-commander/badge.svg)](https://pypi.python.org/pypi/gh-commander/)\r\n**QA** | [![Travis CI](https://api.travis-ci.org/jhermann/gh-commander.svg)](https://travis-ci.org/jhermann/gh-commander) [![Coveralls](https://img.shields.io/coveralls/jhermann/gh-commander.svg)](https://coveralls.io/r/jhermann/gh-commander) [![GitHub Issues](https://img.shields.io/github/issues/jhermann/gh-commander.svg)](https://github.com/jhermann/gh-commander/issues)\r\n**Release** | [![Latest Version](https://img.shields.io/pypi/v/gh-commander.svg)](https://pypi.python.org/pypi/gh-commander/) [![Download format](https://pypip.in/format/gh-commander/badge.svg)](https://pypi.python.org/pypi/gh-commander/) [![Downloads](https://img.shields.io/pypi/dw/gh-commander.svg)](https://pypi.python.org/pypi/gh-commander/)\r\n\r\n\r\n## Overview\r\n\r\n*GitHub Commander* implements the ``gh`` command line tool,\r\nwhich provides a ‘fluent’ interface\r\nusing [click](https://github.com/mitsuhiko/click)\r\n(see [Usage](#usage) below).\r\nIt allows to access the\r\n[GitHub API v3](https://developer.github.com/v3/)\r\nfrom a shell prompt for things usually done in the browser,\r\nand also automates tasks that otherwise are tedious at best,\r\nwhen done by clicking around on a web page.\r\n*GitHub Commander* is powered by [github3.py](https://github.com/sigmavirus24/github3.py).\r\n\r\n:information_source: | Initially, the focus of the project will be to provide task automation, not completeness of covering every API aspect!\r\n---- | :----\r\n\r\n\r\n## Examples\r\n\r\nTo give you a quick impression of what this tool can do for you, here are some example calls:\r\n\r\n```sh\r\n$ gh user show foo\r\nACCOUNT     Maciek Pacut [foo / User #33384]\r\nSINCE/LAST  2008-11-08T18:01:02Z / 2015-03-30T21:35:31Z\r\nURL         https://api.github.com/users/foo\r\nEMAIL       maciek.pacut@gmail.com\r\nREPOS/GISTS 14 ☑ ⎇  / -1 ☒ ⎇  / 0 ☑ ✍ / -1 ☒ ✍\r\nSTATS       ⇦ ⋮ 1 / ⇨ ⋮ 0 / -1 ◔\r\n\r\n$ gh label ls foo/ii\r\n⎇   foo/ii\r\n┌─────────────┬─────────┐\r\n│ Name        │ Color   │\r\n├─────────────┼─────────┤\r\n│ maciekpacut │ #000000 │\r\n└─────────────┴─────────┘\r\n\r\n$ gh label export --format yaml jhermann/gh-commander to -\r\n- {Color: '#fc2929', Name: bug}\r\n- {Color: '#cccccc', Name: duplicate}\r\n- {Color: '#84b6eb', Name: enhancement}\r\n- {Color: '#159818', Name: help wanted}\r\n- {Color: '#ededed', Name: in progress}\r\n- {Color: '#e6e6e6', Name: invalid}\r\n- {Color: '#cc317c', Name: question}\r\n- {Color: '#ededed', Name: ready}\r\n- {Color: '#ffffff', Name: wontfix}\r\n\r\n$ gh label export waif rituals to labels.xls\r\n```\r\n\r\n![labels.xls](https://raw.githubusercontent.com/jhermann/gh-commander/master/docs/_static/label_export_excel.png)\r\n\r\n\r\n## A Practical Use-Case\r\n\r\nThe following shows how to ease the management of a bunch of projects,\r\nvia an [Invoke](http://www.pyinvoke.org/) task that synchronizes labels\r\nacross a set of projects from a\r\n[master definition](https://github.com/jhermann/gh-commander/blob/master/examples/labels.yaml).\r\n\r\n```py\r\nimport os\r\nimport tempfile\r\n\r\nimport requests\r\nfrom invoke import ctask as task\r\n\r\nPROJECTS = \"\"\"\r\n    my/project\r\n    my/other-project\r\n\"\"\"\r\nPROJECTS = [i.strip() for i in PROJECTS.splitlines() if i]\r\nLABEL_MASTER_URL = 'https://raw.githubusercontent.com/jhermann/gh-commander/master/examples/labels.yaml'\r\n\r\n\r\n@task(name='sync-labels')\r\ndef sync_labels(ctx):\r\n    \"\"\"Sync labels into managed projects.\"\"\"\r\n    labels_yaml = requests.get(LABEL_MASTER_URL).text\r\n    with tempfile.NamedTemporaryFile(suffix='.yaml', prefix='gh-label-sync-', delete=False) as handle:\r\n        handle.write(labels_yaml)\r\n\r\n    try:\r\n        ctx.run('gh label import {} from {}'.format(' '.join(PROJECTS), handle.name))\r\n    finally:\r\n        os.remove(handle.name)\r\n```\r\n\r\nSee this [tasks.py](https://github.com/jhermann/Stack-O-Waffles/blob/master/tasks.py) for the real-world application.\r\n\r\n\r\n## Installation\r\n\r\n*GitHub Commander* can be installed via ``pip install gh-commander`` as usual,\r\nsee [releases](https://github.com/jhermann/gh-commander/releases) for an overview of available versions.\r\nTo get a bleeding-edge version from source, use these commands:\r\n\r\n```sh\r\nrepo=\"jhermann/gh-commander\"\r\npip install -r \"https://raw.githubusercontent.com/$repo/master/requirements.txt\"\r\npip install -UI -e \"git+https://github.com/$repo.git#egg=${repo#*/}\"\r\n```\r\n\r\nSee [Contributing](#contributing) on how to create a full development environment.\r\n\r\nTo add bash completion, read the [Click docs](http://click.pocoo.org/4/bashcomplete/#activation) about it,\r\nor just follow these instructions:\r\n\r\n```sh\r\ncmdname=gh\r\nmkdir -p ~/.bash_completion.d\r\n_$(tr a-z A-Z <<<\"$cmdname\")_COMPLETE=source $cmdname >~/.bash_completion.d/$cmdname.sh\r\ngrep /.bash_completion.d/$cmdname.sh ~/.bash_completion >/dev/null \\\r\n    || echo >>~/.bash_completion \". ~/.bash_completion.d/$cmdname.sh\"\r\n. \"/etc/bash_completion\"\r\n```\r\n\r\n\r\n## Configuration\r\n\r\n### Login Credentials\r\nBefore you can use *GitHub Commander*, you have to provide some minimal configuration,\r\nmost importantly credentials for API access. The recommended way for doing so is this:\r\n\r\n 1. In the [Settings › Applications](https://github.com/settings/applications) of your GitHub account,\r\n    press the “Generate new token” button of the “Personal access tokens” section, and follow the instructions.\r\n    Copy the generated token to the clipboard, for use in the next step.\r\n 2. Create the file ``~/.netrc`` with the following contents (or add that to the existing file):\r\n\r\n        machine api.github.com\r\n            user «your GitHub username»\r\n            password «your personal access token»\r\n\r\n 3. Call ``chmod 600 ~/.netrc`` to protect your sensitive data.\r\n\r\nThis way, the sensitive authentication information is separate from the rest of the configuration.\r\nUse the ``gh help`` command to check whether your credentials actually work\r\n– if they do, your GitHub user information is displayed, otherwise you'll get an error indicator.\r\n\r\n\r\n### Main Configuration File\r\n\r\n**TODO**\r\n\r\n\r\n## Usage\r\n\r\nMost of the commands are intentionally self-explanatory,\r\nso usually they are just listed without further details,\r\nin the hope that it's quite obvious what they do.\r\n\r\n\r\n### General Options\r\n\r\nThese options must appear before any sub-command, directly after ``gh``.\r\n\r\n * ``--user ‹account name›`` – Override account name from config.\r\n * ``--token ‹API token›`` – Override API token from config.\r\n * ``--site ‹base URL›`` – Override site URL for on-premise installations of GitHub.\r\n\r\n\r\n### Common Options\r\n\r\nMany of the commands do similar things, like exporting data.\r\nThat fact is reflected in some shared options that always behave the same.\r\nSee the ``--help`` message of every command for details and specific options.\r\n\r\n * ``--format ‹choice›`` – Specifies the output format to use, but is only\r\n   needed in absence of a filename with a clear extension. The choices are\r\n   ``json``, ``yaml``, ``csv``, ``xls``, and ``dbf``.\r\n\r\n\r\n### Common Arguments\r\n\r\n * ``‹repo›`` – A repository name, either fully qualified in the form\r\n   ``‹account›/‹repo›``, or else a plain repository name assumed to be\r\n   owned by the current user.\r\n\r\n\r\n### Labels\r\n\r\n * :heavy_check_mark: ``gh label list ‹repo›…``\r\n * :heavy_check_mark: ``gh label export [--format=…] ‹repo›… [to] ‹filename.ext›``\r\n * :heavy_check_mark: ``gh label import ‹repo› [from] ‹filename.ext›``\r\n\r\n\r\n### Users\r\n\r\n * :heavy_check_mark: ``gh user show [‹username›…]``\r\n\r\n\r\n### Miscellaneous\r\n\r\n * :heavy_check_mark: ``gh help`` – Show information about the installation & configuration, and how to get further help.\r\n\r\n\r\n## Contributing\r\n\r\nTo create a working directory for this project, call these commands:\r\n\r\n```sh\r\ngit clone \"https://github.com/jhermann/gh-commander.git\"\r\ncd \"gh-commander\"\r\n. .env --yes --develop\r\ninvoke ci\r\n```\r\n\r\nSee [CONTRIBUTING](https://github.com/jhermann/gh-commander/blob/master/CONTRIBUTING.md) for more.\r\n\r\n[![Throughput Graph](https://graphs.waffle.io/jhermann/gh-commander/throughput.svg)](https://waffle.io/jhermann/gh-commander/metrics)\r\n\r\n\r\n## References\r\n\r\n**General**\r\n\r\n* [GitHub API v3](https://developer.github.com/v3/)\r\n\r\n**Similar Projects**\r\n\r\n* [sigmavirus24/github-cli](https://github.com/sigmavirus24/github-cli)\r\n\r\n**Tools**\r\n\r\n* [Cookiecutter](http://cookiecutter.readthedocs.org/en/latest/)\r\n* [PyInvoke](http://www.pyinvoke.org/)\r\n* [pytest](http://pytest.org/latest/contents.html)\r\n* [tox](https://tox.readthedocs.org/en/latest/)\r\n* [Pylint](http://docs.pylint.org/)\r\n* [twine](https://github.com/pypa/twine#twine)\r\n* [bpython](http://docs.bpython-interpreter.org/)\r\n* [yolk3k](https://github.com/myint/yolk#yolk)\r\n\r\n**Packages**\r\n\r\n* [github3.py](http://github3py.readthedocs.org/)\r\n* [Rituals](https://jhermann.github.io/rituals)\r\n* [Click](http://click.pocoo.org/)\r\n* [sh](http://amoffat.github.io/sh/)\r\n* [tablib](http://docs.python-tablib.org/en/latest/)\r\n\r\n\r\n## Acknowledgements\r\n\r\n * Logo elements from [clker.com Free Clipart](http://www.clker.com/).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}